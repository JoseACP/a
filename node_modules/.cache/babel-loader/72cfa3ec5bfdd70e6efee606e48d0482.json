{"ast":null,"code":"import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n  if (!handler) return;\n  const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n  handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\n\nclass PressGesture extends Feature {\n  constructor() {\n    super(...arguments);\n    this.removeStartListeners = noop;\n    this.removeEndListeners = noop;\n    this.removeAccessibleListeners = noop;\n\n    this.startPointerPress = (startEvent, startInfo) => {\n      if (this.isPressing) return;\n      this.removeEndListeners();\n      const props = this.node.getProps();\n\n      const endPointerPress = (endEvent, endInfo) => {\n        if (!this.checkPressEnd()) return;\n        const {\n          onTap,\n          onTapCancel,\n          globalTapTarget\n        } = this.node.getProps();\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */\n\n        !globalTapTarget && !isNodeOrChild(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);\n      };\n\n      const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, {\n        passive: !(props.onTap || props[\"onPointerUp\"])\n      });\n      const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), {\n        passive: !(props.onTapCancel || props[\"onPointerCancel\"])\n      });\n      this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n      this.startPress(startEvent, startInfo);\n    };\n\n    this.startAccessiblePress = () => {\n      const handleKeydown = keydownEvent => {\n        if (keydownEvent.key !== \"Enter\" || this.isPressing) return;\n\n        const handleKeyup = keyupEvent => {\n          if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd()) return;\n          fireSyntheticPointerEvent(\"up\", (event, info) => {\n            const {\n              onTap\n            } = this.node.getProps();\n            if (onTap) onTap(event, info);\n          });\n        };\n\n        this.removeEndListeners();\n        this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n        fireSyntheticPointerEvent(\"down\", (event, info) => {\n          this.startPress(event, info);\n        });\n      };\n\n      const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n\n      const handleBlur = () => {\n        if (!this.isPressing) return;\n        fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n      };\n\n      const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n      this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n    };\n  }\n\n  startPress(event, info) {\n    this.isPressing = true;\n    const {\n      onTapStart,\n      whileTap\n    } = this.node.getProps();\n    /**\n     * Ensure we trigger animations before firing event callback\n     */\n\n    if (whileTap && this.node.animationState) {\n      this.node.animationState.setActive(\"whileTap\", true);\n    }\n\n    if (onTapStart) {\n      onTapStart(event, info);\n    }\n  }\n\n  checkPressEnd() {\n    this.removeEndListeners();\n    this.isPressing = false;\n    const props = this.node.getProps();\n\n    if (props.whileTap && this.node.animationState) {\n      this.node.animationState.setActive(\"whileTap\", false);\n    }\n\n    return !isDragActive();\n  }\n\n  cancelPress(event, info) {\n    if (!this.checkPressEnd()) return;\n    const {\n      onTapCancel\n    } = this.node.getProps();\n    if (onTapCancel) onTapCancel(event, info);\n  }\n\n  mount() {\n    const props = this.node.getProps();\n    const removePointerListener = addPointerEvent(props.globalTapTarget ? window : this.node.current, \"pointerdown\", this.startPointerPress, {\n      passive: !(props.onTapStart || props[\"onPointerStart\"])\n    });\n    const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n    this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n  }\n\n  unmount() {\n    this.removeStartListeners();\n    this.removeEndListeners();\n    this.removeAccessibleListeners();\n  }\n\n}\n\nexport { PressGesture };","map":{"version":3,"names":["extractEventInfo","addDomEvent","addPointerEvent","Feature","pipe","isDragActive","isNodeOrChild","noop","fireSyntheticPointerEvent","name","handler","syntheticPointerEvent","PointerEvent","PressGesture","constructor","arguments","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startEvent","startInfo","isPressing","props","node","getProps","endPointerPress","endEvent","endInfo","checkPressEnd","onTap","onTapCancel","globalTapTarget","current","target","removePointerUpListener","window","passive","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","handleKeydown","keydownEvent","key","handleKeyup","keyupEvent","event","info","removeKeydownListener","handleBlur","removeBlurListener","onTapStart","whileTap","animationState","setActive","mount","removePointerListener","removeFocusListener","unmount"],"sources":["/Users/pepe/Documents/signin/node_modules/framer-motion/dist/es/gestures/press.mjs"],"sourcesContent":["import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            if (this.isPressing)\n                return;\n            this.removeEndListeners();\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel, globalTapTarget } = this.node.getProps();\n                /**\n                 * We only count this as a tap gesture if the event.target is the same\n                 * as, or a child of, this component's element\n                 */\n                !globalTapTarget &&\n                    !isNodeOrChild(this.node.current, endEvent.target)\n                    ? onTapCancel && onTapCancel(endEvent, endInfo)\n                    : onTap && onTap(endEvent, endInfo);\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap)\n                            onTap(event, info);\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            onTapStart(event, info);\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel)\n            onTapCancel(event, info);\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(props.globalTapTarget ? window : this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}