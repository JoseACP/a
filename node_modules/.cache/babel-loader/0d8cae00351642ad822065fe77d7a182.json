{"ast":null,"code":"import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = {\n  visibility: \"hidden\"\n};\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\n\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\n\nconst projectionFrameData = {\n  type: \"projectionFrame\",\n  totalNodes: 0,\n  resolvedTargetDeltas: 0,\n  recalculatedProjection: 0\n};\n\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n  const {\n    latestValues\n  } = visualElement; // Record the distorting transform and then temporarily set it to 0\n\n  if (latestValues[key]) {\n    values[key] = latestValues[key];\n    visualElement.setStaticValue(key, 0);\n\n    if (sharedAnimationValues) {\n      sharedAnimationValues[key] = 0;\n    }\n  }\n}\n\nfunction createProjectionNode(_ref) {\n  let {\n    attachResizeListener,\n    defaultParent,\n    measureScroll,\n    checkIsScrollRoot,\n    resetTransform\n  } = _ref;\n  return class ProjectionNode {\n    constructor() {\n      let latestValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n\n      /**\n       * A unique ID generated for every projection node.\n       */\n      this.id = id++;\n      /**\n       * An id that represents a unique session instigated by startUpdate.\n       */\n\n      this.animationId = 0;\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n\n      this.isLayoutDirty = false;\n      /**\n       * Flag to true if we think the projection calculations for this node needs\n       * recalculating as a result of an updated transform or layout animation.\n       */\n\n      this.isProjectionDirty = false;\n      /**\n       * Flag to true if the layout *or* transform has changed. This then gets propagated\n       * throughout the projection tree, forcing any element below to recalculate on the next frame.\n       */\n\n      this.isSharedProjectionDirty = false;\n      /**\n       * Flag transform dirty. This gets propagated throughout the whole tree but is only\n       * respected by shared nodes.\n       */\n\n      this.isTransformDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n\n      this.eventHandlers = new Map();\n      this.hasTreeAnimated = false; // Note: Currently only running on root node\n\n      this.updateScheduled = false;\n      this.projectionUpdateScheduled = false;\n\n      this.checkUpdateFailed = () => {\n        if (this.isUpdating) {\n          this.isUpdating = false;\n          this.clearAllSnapshots();\n        }\n      };\n      /**\n       * This is a multi-step process as shared nodes might be of different depths. Nodes\n       * are sorted by depth order, so we need to resolve the entire tree before moving to\n       * the next step.\n       */\n\n\n      this.updateProjection = () => {\n        this.projectionUpdateScheduled = false;\n        /**\n         * Reset debug counts. Manually resetting rather than creating a new\n         * object each frame.\n         */\n\n        projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;\n        this.nodes.forEach(propagateDirtyNodes);\n        this.nodes.forEach(resolveTargetDelta);\n        this.nodes.forEach(calcProjection);\n        this.nodes.forEach(cleanDirtyNodes);\n        record(projectionFrameData);\n      };\n\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n\n      this.sharedNodes = new Map();\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [...parent.path, parent] : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n\n      for (let i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n\n    addEventListener(name, handler) {\n      if (!this.eventHandlers.has(name)) {\n        this.eventHandlers.set(name, new SubscriptionManager());\n      }\n\n      return this.eventHandlers.get(name).add(handler);\n    }\n\n    notifyListeners(name) {\n      const subscriptionManager = this.eventHandlers.get(name);\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      subscriptionManager && subscriptionManager.notify(...args);\n    }\n\n    hasListeners(name) {\n      return this.eventHandlers.has(name);\n    }\n    /**\n     * Lifecycles\n     */\n\n\n    mount(instance) {\n      let isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root.hasTreeAnimated;\n      if (this.instance) return;\n      this.isSVG = isSVGElement(instance);\n      this.instance = instance;\n      const {\n        layoutId,\n        layout,\n        visualElement\n      } = this.options;\n\n      if (visualElement && !visualElement.current) {\n        visualElement.mount(instance);\n      }\n\n      this.root.nodes.add(this);\n      this.parent && this.parent.children.add(this);\n\n      if (isLayoutDirty && (layout || layoutId)) {\n        this.isLayoutDirty = true;\n      }\n\n      if (attachResizeListener) {\n        let cancelDelay;\n\n        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;\n\n        attachResizeListener(instance, () => {\n          this.root.updateBlockedByResize = true;\n          cancelDelay && cancelDelay();\n          cancelDelay = delay(resizeUnblockUpdate, 250);\n\n          if (globalProjectionState.hasAnimatedSinceResize) {\n            globalProjectionState.hasAnimatedSinceResize = false;\n            this.nodes.forEach(finishAnimation);\n          }\n        });\n      }\n\n      if (layoutId) {\n        this.root.registerSharedNode(layoutId, this);\n      } // Only register the handler if it requires layout animation\n\n\n      if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n        this.addEventListener(\"didUpdate\", _ref2 => {\n          let {\n            delta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n            layout: newLayout\n          } = _ref2;\n\n          if (this.isTreeAnimationBlocked()) {\n            this.target = undefined;\n            this.relativeTarget = undefined;\n            return;\n          } // TODO: Check here if an animation exists\n\n\n          const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n          const {\n            onLayoutAnimationStart,\n            onLayoutAnimationComplete\n          } = visualElement.getProps();\n          /**\n           * The target layout of the element might stay the same,\n           * but its position relative to its parent has changed.\n           */\n\n          const targetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout) || hasRelativeTargetChanged;\n          /**\n           * If the layout hasn't seemed to have changed, it might be that the\n           * element is visually in the same place in the document but its position\n           * relative to its parent has indeed changed. So here we check for that.\n           */\n\n          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n\n          if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {\n            if (this.resumeFrom) {\n              this.resumingFrom = this.resumeFrom;\n              this.resumingFrom.resumingFrom = undefined;\n            }\n\n            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n            const animationOptions = { ...getValueTransition(layoutTransition, \"layout\"),\n              onPlay: onLayoutAnimationStart,\n              onComplete: onLayoutAnimationComplete\n            };\n\n            if (visualElement.shouldReduceMotion || this.options.layoutRoot) {\n              animationOptions.delay = 0;\n              animationOptions.type = false;\n            }\n\n            this.startAnimation(animationOptions);\n          } else {\n            /**\n             * If the layout hasn't changed and we have an animation that hasn't started yet,\n             * finish it immediately. Otherwise it will be animating from a location\n             * that was probably never commited to screen and look like a jumpy box.\n             */\n            if (!hasLayoutChanged) {\n              finishAnimation(this);\n            }\n\n            if (this.isLead() && this.options.onExitComplete) {\n              this.options.onExitComplete();\n            }\n          }\n\n          this.targetLayout = newLayout;\n        });\n      }\n    }\n\n    unmount() {\n      this.options.layoutId && this.willUpdate();\n      this.root.nodes.remove(this);\n      const stack = this.getStack();\n      stack && stack.remove(this);\n      this.parent && this.parent.children.delete(this);\n      this.instance = undefined;\n      cancelFrame(this.updateProjection);\n    } // only on the root\n\n\n    blockUpdate() {\n      this.updateManuallyBlocked = true;\n    }\n\n    unblockUpdate() {\n      this.updateManuallyBlocked = false;\n    }\n\n    isUpdateBlocked() {\n      return this.updateManuallyBlocked || this.updateBlockedByResize;\n    }\n\n    isTreeAnimationBlocked() {\n      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n    } // Note: currently only running on root node\n\n\n    startUpdate() {\n      if (this.isUpdateBlocked()) return;\n      this.isUpdating = true;\n      this.nodes && this.nodes.forEach(resetSkewAndRotation);\n      this.animationId++;\n    }\n\n    getTransformTemplate() {\n      const {\n        visualElement\n      } = this.options;\n      return visualElement && visualElement.getProps().transformTemplate;\n    }\n\n    willUpdate() {\n      let shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.root.hasTreeAnimated = true;\n\n      if (this.root.isUpdateBlocked()) {\n        this.options.onExitComplete && this.options.onExitComplete();\n        return;\n      }\n\n      !this.root.isUpdating && this.root.startUpdate();\n      if (this.isLayoutDirty) return;\n      this.isLayoutDirty = true;\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        node.shouldResetTransform = true;\n        node.updateScroll(\"snapshot\");\n\n        if (node.options.layoutRoot) {\n          node.willUpdate(false);\n        }\n      }\n\n      const {\n        layoutId,\n        layout\n      } = this.options;\n      if (layoutId === undefined && !layout) return;\n      const transformTemplate = this.getTransformTemplate();\n      this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n      this.updateSnapshot();\n      shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n    }\n\n    update() {\n      this.updateScheduled = false;\n      const updateWasBlocked = this.isUpdateBlocked(); // When doing an instant transition, we skip the layout update,\n      // but should still clean up the measurements so that the next\n      // snapshot could be taken correctly.\n\n      if (updateWasBlocked) {\n        this.unblockUpdate();\n        this.clearAllSnapshots();\n        this.nodes.forEach(clearMeasurements);\n        return;\n      }\n\n      if (!this.isUpdating) {\n        this.nodes.forEach(clearIsLayoutDirty);\n      }\n\n      this.isUpdating = false;\n      /**\n       * Write\n       */\n\n      if (window.HandoffCancelAllAnimations) {\n        window.HandoffCancelAllAnimations();\n      }\n\n      this.nodes.forEach(resetTransformStyle);\n      /**\n       * Read ==================\n       */\n      // Update layout measurements of updated children\n\n      this.nodes.forEach(updateLayout);\n      /**\n       * Write\n       */\n      // Notify listeners that the layout is updated\n\n      this.nodes.forEach(notifyLayoutUpdate);\n      this.clearAllSnapshots();\n      /**\n       * Manually flush any pending updates. Ideally\n       * we could leave this to the following requestAnimationFrame but this seems\n       * to leave a flash of incorrectly styled content.\n       */\n\n      const now = time.now();\n      frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n      frameData.timestamp = now;\n      frameData.isProcessing = true;\n      steps.update.process(frameData);\n      steps.preRender.process(frameData);\n      steps.render.process(frameData);\n      frameData.isProcessing = false;\n    }\n\n    didUpdate() {\n      if (!this.updateScheduled) {\n        this.updateScheduled = true;\n        microtask.read(() => this.update());\n      }\n    }\n\n    clearAllSnapshots() {\n      this.nodes.forEach(clearSnapshot);\n      this.sharedNodes.forEach(removeLeadSnapshots);\n    }\n\n    scheduleUpdateProjection() {\n      if (!this.projectionUpdateScheduled) {\n        this.projectionUpdateScheduled = true;\n        frame.preRender(this.updateProjection, false, true);\n      }\n    }\n\n    scheduleCheckAfterUnmount() {\n      /**\n       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n       * we manually call didUpdate to give a chance to the siblings to animate.\n       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n       */\n      frame.postRender(() => {\n        if (this.isLayoutDirty) {\n          this.root.didUpdate();\n        } else {\n          this.root.checkUpdateFailed();\n        }\n      });\n    }\n    /**\n     * Update measurements\n     */\n\n\n    updateSnapshot() {\n      if (this.snapshot || !this.instance) return;\n      this.snapshot = this.measure();\n    }\n\n    updateLayout() {\n      if (!this.instance) return; // TODO: Incorporate into a forwarded scroll offset\n\n      this.updateScroll();\n\n      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n        return;\n      }\n      /**\n       * When a node is mounted, it simply resumes from the prevLead's\n       * snapshot instead of taking a new one, but the ancestors scroll\n       * might have updated while the prevLead is unmounted. We need to\n       * update the scroll again to make sure the layout we measure is\n       * up to date.\n       */\n\n\n      if (this.resumeFrom && !this.resumeFrom.instance) {\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          node.updateScroll();\n        }\n      }\n\n      const prevLayout = this.layout;\n      this.layout = this.measure(false);\n      this.layoutCorrected = createBox();\n      this.isLayoutDirty = false;\n      this.projectionDelta = undefined;\n      this.notifyListeners(\"measure\", this.layout.layoutBox);\n      const {\n        visualElement\n      } = this.options;\n      visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n    }\n\n    updateScroll() {\n      let phase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"measure\";\n      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n\n      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n        needsMeasurement = false;\n      }\n\n      if (needsMeasurement) {\n        this.scroll = {\n          animationId: this.root.animationId,\n          phase,\n          isRoot: checkIsScrollRoot(this.instance),\n          offset: measureScroll(this.instance)\n        };\n      }\n    }\n\n    resetTransform() {\n      if (!resetTransform) return;\n      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n      const transformTemplate = this.getTransformTemplate();\n      const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n\n      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n        resetTransform(this.instance, transformTemplateValue);\n        this.shouldResetTransform = false;\n        this.scheduleRender();\n      }\n    }\n\n    measure() {\n      let removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      const pageBox = this.measurePageBox();\n      let layoutBox = this.removeElementScroll(pageBox);\n      /**\n       * Measurements taken during the pre-render stage\n       * still have transforms applied so we remove them\n       * via calculation.\n       */\n\n      if (removeTransform) {\n        layoutBox = this.removeTransform(layoutBox);\n      }\n\n      roundBox(layoutBox);\n      return {\n        animationId: this.root.animationId,\n        measuredBox: pageBox,\n        layoutBox,\n        latestValues: {},\n        source: this.id\n      };\n    }\n\n    measurePageBox() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return createBox();\n      const box = visualElement.measureViewportBox(); // Remove viewport scroll to give page-relative coordinates\n\n      const {\n        scroll\n      } = this.root;\n\n      if (scroll) {\n        translateAxis(box.x, scroll.offset.x);\n        translateAxis(box.y, scroll.offset.y);\n      }\n\n      return box;\n    }\n\n    removeElementScroll(box) {\n      const boxWithoutScroll = createBox();\n      copyBoxInto(boxWithoutScroll, box);\n      /**\n       * Performance TODO: Keep a cumulative scroll offset down the tree\n       * rather than loop back up the path.\n       */\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        const {\n          scroll,\n          options\n        } = node;\n\n        if (node !== this.root && scroll && options.layoutScroll) {\n          /**\n           * If this is a new scroll root, we want to remove all previous scrolls\n           * from the viewport box.\n           */\n          if (scroll.isRoot) {\n            copyBoxInto(boxWithoutScroll, box);\n            const {\n              scroll: rootScroll\n            } = this.root;\n            /**\n             * Undo the application of page scroll that was originally added\n             * to the measured bounding box.\n             */\n\n            if (rootScroll) {\n              translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n              translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n            }\n          }\n\n          translateAxis(boxWithoutScroll.x, scroll.offset.x);\n          translateAxis(boxWithoutScroll.y, scroll.offset.y);\n        }\n      }\n\n      return boxWithoutScroll;\n    }\n\n    applyTransform(box) {\n      let transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const withTransforms = createBox();\n      copyBoxInto(withTransforms, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n\n        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n          transformBox(withTransforms, {\n            x: -node.scroll.offset.x,\n            y: -node.scroll.offset.y\n          });\n        }\n\n        if (!hasTransform(node.latestValues)) continue;\n        transformBox(withTransforms, node.latestValues);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        transformBox(withTransforms, this.latestValues);\n      }\n\n      return withTransforms;\n    }\n\n    removeTransform(box) {\n      const boxWithoutTransform = createBox();\n      copyBoxInto(boxWithoutTransform, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        if (!node.instance) continue;\n        if (!hasTransform(node.latestValues)) continue;\n        hasScale(node.latestValues) && node.updateSnapshot();\n        const sourceBox = createBox();\n        const nodeBox = node.measurePageBox();\n        copyBoxInto(sourceBox, nodeBox);\n        removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        removeBoxTransforms(boxWithoutTransform, this.latestValues);\n      }\n\n      return boxWithoutTransform;\n    }\n\n    setTargetDelta(delta) {\n      this.targetDelta = delta;\n      this.root.scheduleUpdateProjection();\n      this.isProjectionDirty = true;\n    }\n\n    setOptions(options) {\n      this.options = { ...this.options,\n        ...options,\n        crossfade: options.crossfade !== undefined ? options.crossfade : true\n      };\n    }\n\n    clearMeasurements() {\n      this.scroll = undefined;\n      this.layout = undefined;\n      this.snapshot = undefined;\n      this.prevTransformTemplateValue = undefined;\n      this.targetDelta = undefined;\n      this.target = undefined;\n      this.isLayoutDirty = false;\n    }\n\n    forceRelativeParentToResolveTarget() {\n      if (!this.relativeParent) return;\n      /**\n       * If the parent target isn't up-to-date, force it to update.\n       * This is an unfortunate de-optimisation as it means any updating relative\n       * projection will cause all the relative parents to recalculate back\n       * up the tree.\n       */\n\n      if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {\n        this.relativeParent.resolveTargetDelta(true);\n      }\n    }\n\n    resolveTargetDelta() {\n      let forceRecalculation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var _a;\n      /**\n       * Once the dirty status of nodes has been spread through the tree, we also\n       * need to check if we have a shared node of a different depth that has itself\n       * been dirtied.\n       */\n\n\n      const lead = this.getLead();\n      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n      this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n      const isShared = Boolean(this.resumingFrom) || this !== lead;\n      /**\n       * We don't use transform for this step of processing so we don't\n       * need to check whether any nodes have changed transform.\n       */\n\n      const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget);\n      if (canSkip) return;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If we have no layout, we can't perform projection, so early return\n       */\n\n      if (!this.layout || !(layout || layoutId)) return;\n      this.resolvedRelativeTargetAt = frameData.timestamp;\n      /**\n       * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n       * a relativeParent. This will allow a component to perform scale correction\n       * even if no animation has started.\n       */\n\n      if (!this.targetDelta && !this.relativeTarget) {\n        const relativeParent = this.getClosestProjectingParent();\n\n        if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {\n          this.relativeParent = relativeParent;\n          this.forceRelativeParentToResolveTarget();\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n      /**\n       * If we have no relative target or no target delta our target isn't valid\n       * for this frame.\n       */\n\n\n      if (!this.relativeTarget && !this.targetDelta) return;\n      /**\n       * Lazy-init target data structure\n       */\n\n      if (!this.target) {\n        this.target = createBox();\n        this.targetWithTransforms = createBox();\n      }\n      /**\n       * If we've got a relative box for this component, resolve it into a target relative to the parent.\n       */\n\n\n      if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n        this.forceRelativeParentToResolveTarget();\n        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n        /**\n         * If we've only got a targetDelta, resolve it into a target\n         */\n      } else if (this.targetDelta) {\n        if (Boolean(this.resumingFrom)) {\n          // TODO: This is creating a new object every frame\n          this.target = this.applyTransform(this.layout.layoutBox);\n        } else {\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n\n        applyBoxDelta(this.target, this.targetDelta);\n      } else {\n        /**\n         * If no target, use own layout as target\n         */\n        copyBoxInto(this.target, this.layout.layoutBox);\n      }\n      /**\n       * If we've been told to attempt to resolve a relative target, do so.\n       */\n\n\n      if (this.attemptToResolveRelativeTarget) {\n        this.attemptToResolveRelativeTarget = false;\n        const relativeParent = this.getClosestProjectingParent();\n\n        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {\n          this.relativeParent = relativeParent;\n          this.forceRelativeParentToResolveTarget();\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n      /**\n       * Increase debug counter for resolved target deltas\n       */\n\n\n      projectionFrameData.resolvedTargetDeltas++;\n    }\n\n    getClosestProjectingParent() {\n      if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {\n        return undefined;\n      }\n\n      if (this.parent.isProjecting()) {\n        return this.parent;\n      } else {\n        return this.parent.getClosestProjectingParent();\n      }\n    }\n\n    isProjecting() {\n      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n    }\n\n    calcProjection() {\n      var _a;\n\n      const lead = this.getLead();\n      const isShared = Boolean(this.resumingFrom) || this !== lead;\n      let canSkip = true;\n      /**\n       * If this is a normal layout animation and neither this node nor its nearest projecting\n       * is dirty then we can't skip.\n       */\n\n      if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n        canSkip = false;\n      }\n      /**\n       * If this is a shared layout animation and this node's shared projection is dirty then\n       * we can't skip.\n       */\n\n\n      if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {\n        canSkip = false;\n      }\n      /**\n       * If we have resolved the target this frame we must recalculate the\n       * projection to ensure it visually represents the internal calculations.\n       */\n\n\n      if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n        canSkip = false;\n      }\n\n      if (canSkip) return;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If this section of the tree isn't animating we can\n       * delete our target sources for the following frame.\n       */\n\n      this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n\n      if (!this.isTreeAnimating) {\n        this.targetDelta = this.relativeTarget = undefined;\n      }\n\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * Reset the corrected box with the latest values from box, as we're then going\n       * to perform mutative operations on it.\n       */\n\n      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n      /**\n       * Record previous tree scales before updating.\n       */\n\n      const prevTreeScaleX = this.treeScale.x;\n      const prevTreeScaleY = this.treeScale.y;\n      /**\n       * Apply all the parent deltas to this box to produce the corrected box. This\n       * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n       */\n\n      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n      /**\n       * If this layer needs to perform scale correction but doesn't have a target,\n       * use the layout as the target.\n       */\n\n      if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n        lead.target = lead.layout.layoutBox;\n        lead.targetWithTransforms = createBox();\n      }\n\n      const {\n        target\n      } = lead;\n\n      if (!target) {\n        /**\n         * If we don't have a target to project into, but we were previously\n         * projecting, we want to remove the stored transform and schedule\n         * a render to ensure the elements reflect the removed transform.\n         */\n        if (this.projectionTransform) {\n          this.projectionDelta = createDelta();\n          this.projectionTransform = \"none\";\n          this.scheduleRender();\n        }\n\n        return;\n      }\n\n      if (!this.projectionDelta) {\n        this.projectionDelta = createDelta();\n        this.projectionDeltaWithTransform = createDelta();\n      }\n\n      const prevProjectionTransform = this.projectionTransform;\n      /**\n       * Update the delta between the corrected box and the target box before user-set transforms were applied.\n       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n       * for our layout reprojection, but still allow them to be scaled correctly by the user.\n       * It might be that to simplify this we may want to accept that user-set scale is also corrected\n       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n       * to allow people to choose whether these styles are corrected based on just the\n       * layout reprojection or the final bounding box.\n       */\n\n      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n\n      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n        this.hasProjected = true;\n        this.scheduleRender();\n        this.notifyListeners(\"projectionUpdate\", target);\n      }\n      /**\n       * Increase debug counter for recalculated projections\n       */\n\n\n      projectionFrameData.recalculatedProjection++;\n    }\n\n    hide() {\n      this.isVisible = false; // TODO: Schedule render\n    }\n\n    show() {\n      this.isVisible = true; // TODO: Schedule render\n    }\n\n    scheduleRender() {\n      let notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.options.scheduleRender && this.options.scheduleRender();\n\n      if (notifyAll) {\n        const stack = this.getStack();\n        stack && stack.scheduleRender();\n      }\n\n      if (this.resumingFrom && !this.resumingFrom.instance) {\n        this.resumingFrom = undefined;\n      }\n    }\n\n    setAnimationOrigin(delta) {\n      let hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const snapshot = this.snapshot;\n      const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n      const mixedValues = { ...this.latestValues\n      };\n      const targetDelta = createDelta();\n\n      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n        this.relativeTarget = this.relativeTargetOrigin = undefined;\n      }\n\n      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n      const relativeLayout = createBox();\n      const snapshotSource = snapshot ? snapshot.source : undefined;\n      const layoutSource = this.layout ? this.layout.source : undefined;\n      const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n      const stack = this.getStack();\n      const isOnlyMember = !stack || stack.members.length <= 1;\n      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n      this.animationProgress = 0;\n      let prevRelativeTarget;\n\n      this.mixTargetDelta = latest => {\n        const progress = latest / 1000;\n        mixAxisDelta(targetDelta.x, delta.x, progress);\n        mixAxisDelta(targetDelta.y, delta.y, progress);\n        this.setTargetDelta(targetDelta);\n\n        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {\n          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n          /**\n           * If this is an unchanged relative target we can consider the\n           * projection not dirty.\n           */\n\n          if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {\n            this.isProjectionDirty = false;\n          }\n\n          if (!prevRelativeTarget) prevRelativeTarget = createBox();\n          copyBoxInto(prevRelativeTarget, this.relativeTarget);\n        }\n\n        if (isSharedLayoutAnimation) {\n          this.animationValues = mixedValues;\n          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n        }\n\n        this.root.scheduleUpdateProjection();\n        this.scheduleRender();\n        this.animationProgress = progress;\n      };\n\n      this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n    }\n\n    startAnimation(options) {\n      this.notifyListeners(\"animationStart\");\n      this.currentAnimation && this.currentAnimation.stop();\n\n      if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n        this.resumingFrom.currentAnimation.stop();\n      }\n\n      if (this.pendingAnimation) {\n        cancelFrame(this.pendingAnimation);\n        this.pendingAnimation = undefined;\n      }\n      /**\n       * Start the animation in the next frame to have a frame with progress 0,\n       * where the target is the same as when the animation started, so we can\n       * calculate the relative positions correctly for instant transitions.\n       */\n\n\n      this.pendingAnimation = frame.update(() => {\n        globalProjectionState.hasAnimatedSinceResize = true;\n        this.currentAnimation = animateSingleValue(0, animationTarget, { ...options,\n          onUpdate: latest => {\n            this.mixTargetDelta(latest);\n            options.onUpdate && options.onUpdate(latest);\n          },\n          onComplete: () => {\n            options.onComplete && options.onComplete();\n            this.completeAnimation();\n          }\n        });\n\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = this.currentAnimation;\n        }\n\n        this.pendingAnimation = undefined;\n      });\n    }\n\n    completeAnimation() {\n      if (this.resumingFrom) {\n        this.resumingFrom.currentAnimation = undefined;\n        this.resumingFrom.preserveOpacity = undefined;\n      }\n\n      const stack = this.getStack();\n      stack && stack.exitAnimationComplete();\n      this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n      this.notifyListeners(\"animationComplete\");\n    }\n\n    finishAnimation() {\n      if (this.currentAnimation) {\n        this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n        this.currentAnimation.stop();\n      }\n\n      this.completeAnimation();\n    }\n\n    applyTransformsToTarget() {\n      const lead = this.getLead();\n      let {\n        targetWithTransforms,\n        target,\n        layout,\n        latestValues\n      } = lead;\n      if (!targetWithTransforms || !target || !layout) return;\n      /**\n       * If we're only animating position, and this element isn't the lead element,\n       * then instead of projecting into the lead box we instead want to calculate\n       * a new target that aligns the two boxes but maintains the layout shape.\n       */\n\n      if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n        target = this.target || createBox();\n        const xLength = calcLength(this.layout.layoutBox.x);\n        target.x.min = lead.target.x.min;\n        target.x.max = target.x.min + xLength;\n        const yLength = calcLength(this.layout.layoutBox.y);\n        target.y.min = lead.target.y.min;\n        target.y.max = target.y.min + yLength;\n      }\n\n      copyBoxInto(targetWithTransforms, target);\n      /**\n       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n       * This is the final box that we will then project into by calculating a transform delta and\n       * applying it to the corrected box.\n       */\n\n      transformBox(targetWithTransforms, latestValues);\n      /**\n       * Update the delta between the corrected box and the final target box, after\n       * user-set transforms are applied to it. This will be used by the renderer to\n       * create a transform style that will reproject the element from its layout layout\n       * into the desired bounding box.\n       */\n\n      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n    }\n\n    registerSharedNode(layoutId, node) {\n      if (!this.sharedNodes.has(layoutId)) {\n        this.sharedNodes.set(layoutId, new NodeStack());\n      }\n\n      const stack = this.sharedNodes.get(layoutId);\n      stack.add(node);\n      const config = node.options.initialPromotionConfig;\n      node.promote({\n        transition: config ? config.transition : undefined,\n        preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n      });\n    }\n\n    isLead() {\n      const stack = this.getStack();\n      return stack ? stack.lead === this : true;\n    }\n\n    getLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n    }\n\n    getPrevLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n    }\n\n    getStack() {\n      const {\n        layoutId\n      } = this.options;\n      if (layoutId) return this.root.sharedNodes.get(layoutId);\n    }\n\n    promote() {\n      let {\n        needsReset,\n        transition,\n        preserveFollowOpacity\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const stack = this.getStack();\n      if (stack) stack.promote(this, preserveFollowOpacity);\n\n      if (needsReset) {\n        this.projectionDelta = undefined;\n        this.needsReset = true;\n      }\n\n      if (transition) this.setOptions({\n        transition\n      });\n    }\n\n    relegate() {\n      const stack = this.getStack();\n\n      if (stack) {\n        return stack.relegate(this);\n      } else {\n        return false;\n      }\n    }\n\n    resetSkewAndRotation() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return; // If there's no detected skew or rotation values, we can early return without a forced render.\n\n      let hasDistortingTransform = false;\n      /**\n       * An unrolled check for rotation values. Most elements don't have any rotation and\n       * skipping the nested loop and new object creation is 50% faster.\n       */\n\n      const {\n        latestValues\n      } = visualElement;\n\n      if (latestValues.z || latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ || latestValues.skewX || latestValues.skewY) {\n        hasDistortingTransform = true;\n      } // If there's no distorting values, we don't need to do any more.\n\n\n      if (!hasDistortingTransform) return;\n      const resetValues = {};\n\n      if (latestValues.z) {\n        resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n      } // Check the skew and rotate value of all axes and reset to 0\n\n\n      for (let i = 0; i < transformAxes.length; i++) {\n        resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n        resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n      } // Force a render of this element to apply the transform with all skews and rotations\n      // set to 0.\n\n\n      visualElement.render(); // Put back all the values we reset\n\n      for (const key in resetValues) {\n        visualElement.setStaticValue(key, resetValues[key]);\n\n        if (this.animationValues) {\n          this.animationValues[key] = resetValues[key];\n        }\n      } // Schedule a render for the next frame. This ensures we won't visually\n      // see the element with the reset rotate value applied.\n\n\n      visualElement.scheduleRender();\n    }\n\n    getProjectionStyles(styleProp) {\n      var _a, _b;\n\n      if (!this.instance || this.isSVG) return undefined;\n\n      if (!this.isVisible) {\n        return hiddenVisibility;\n      }\n\n      const styles = {\n        visibility: \"\"\n      };\n      const transformTemplate = this.getTransformTemplate();\n\n      if (this.needsReset) {\n        this.needsReset = false;\n        styles.opacity = \"\";\n        styles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n        styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n        return styles;\n      }\n\n      const lead = this.getLead();\n\n      if (!this.projectionDelta || !this.layout || !lead.target) {\n        const emptyStyles = {};\n\n        if (this.options.layoutId) {\n          emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n          emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n        }\n\n        if (this.hasProjected && !hasTransform(this.latestValues)) {\n          emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n          this.hasProjected = false;\n        }\n\n        return emptyStyles;\n      }\n\n      const valuesToRender = lead.animationValues || lead.latestValues;\n      this.applyTransformsToTarget();\n      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n\n      if (transformTemplate) {\n        styles.transform = transformTemplate(valuesToRender, styles.transform);\n      }\n\n      const {\n        x,\n        y\n      } = this.projectionDelta;\n      styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n\n      if (lead.animationValues) {\n        /**\n         * If the lead component is animating, assign this either the entering/leaving\n         * opacity\n         */\n        styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n      } else {\n        /**\n         * Or we're not animating at all, set the lead component to its layout\n         * opacity and other components to hidden.\n         */\n        styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n      }\n      /**\n       * Apply scale correction\n       */\n\n\n      for (const key in scaleCorrectors) {\n        if (valuesToRender[key] === undefined) continue;\n        const {\n          correct,\n          applyTo\n        } = scaleCorrectors[key];\n        /**\n         * Only apply scale correction to the value if we have an\n         * active projection transform. Otherwise these values become\n         * vulnerable to distortion if the element changes size without\n         * a corresponding layout animation.\n         */\n\n        const corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n\n        if (applyTo) {\n          const num = applyTo.length;\n\n          for (let i = 0; i < num; i++) {\n            styles[applyTo[i]] = corrected;\n          }\n        } else {\n          styles[key] = corrected;\n        }\n      }\n      /**\n       * Disable pointer events on follow components. This is to ensure\n       * that if a follow component covers a lead component it doesn't block\n       * pointer events on the lead.\n       */\n\n\n      if (this.options.layoutId) {\n        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\" : \"none\";\n      }\n\n      return styles;\n    }\n\n    clearSnapshot() {\n      this.resumeFrom = this.snapshot = undefined;\n    } // Only run on root\n\n\n    resetTree() {\n      this.root.nodes.forEach(node => {\n        var _a;\n\n        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      });\n      this.root.nodes.forEach(clearMeasurements);\n      this.root.sharedNodes.clear();\n    }\n\n  };\n}\n\nfunction updateLayout(node) {\n  node.updateLayout();\n}\n\nfunction notifyLayoutUpdate(node) {\n  var _a;\n\n  const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    const {\n      layoutBox: layout,\n      measuredBox: measuredLayout\n    } = node.layout;\n    const {\n      animationType\n    } = node.options;\n    const isShared = snapshot.source !== node.layout.source; // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n\n    if (animationType === \"size\") {\n      eachAxis(axis => {\n        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(axis => {\n        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n        /**\n         * Ensure relative target gets resized and rerendererd\n         */\n\n        if (node.relativeTarget && !node.currentAnimation) {\n          node.isProjectionDirty = true;\n          node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;\n        }\n      });\n    }\n\n    const layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    const visualDelta = createDelta();\n\n    if (isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n\n    const hasLayoutChanged = !isDeltaZero(layoutDelta);\n    let hasRelativeTargetChanged = false;\n\n    if (!node.resumeFrom) {\n      const relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n\n      if (relativeParent && !relativeParent.resumeFrom) {\n        const {\n          snapshot: parentSnapshot,\n          layout: parentLayout\n        } = relativeParent;\n\n        if (parentSnapshot && parentLayout) {\n          const relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          const relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n\n          if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n\n          if (relativeParent.options.layoutRoot) {\n            node.relativeTarget = relativeLayout;\n            node.relativeTargetOrigin = relativeSnapshot;\n            node.relativeParent = relativeParent;\n          }\n        }\n      }\n    }\n\n    node.notifyListeners(\"didUpdate\", {\n      layout,\n      snapshot,\n      delta: visualDelta,\n      layoutDelta,\n      hasLayoutChanged,\n      hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    const {\n      onExitComplete\n    } = node.options;\n    onExitComplete && onExitComplete();\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n\n\n  node.options.transition = undefined;\n}\n\nfunction propagateDirtyNodes(node) {\n  /**\n   * Increase debug counter for nodes encountered this frame\n   */\n  projectionFrameData.totalNodes++;\n  if (!node.parent) return;\n  /**\n   * If this node isn't projecting, propagate isProjectionDirty. It will have\n   * no performance impact but it will allow the next child that *is* projecting\n   * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n   * correcting.\n   */\n\n  if (!node.isProjecting()) {\n    node.isProjectionDirty = node.parent.isProjectionDirty;\n  }\n  /**\n   * Propagate isSharedProjectionDirty and isTransformDirty\n   * throughout the whole tree. A future revision can take another look at\n   * this but for safety we still recalcualte shared nodes.\n   */\n\n\n  node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));\n  node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\n\nfunction cleanDirtyNodes(node) {\n  node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;\n}\n\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\n\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\n\nfunction clearIsLayoutDirty(node) {\n  node.isLayoutDirty = false;\n}\n\nfunction resetTransformStyle(node) {\n  const {\n    visualElement\n  } = node.options;\n\n  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n\n  node.resetTransform();\n}\n\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n  node.isProjectionDirty = true;\n}\n\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\n\nfunction calcProjection(node) {\n  node.calcProjection();\n}\n\nfunction resetSkewAndRotation(node) {\n  node.resetSkewAndRotation();\n}\n\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\n\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mixNumber(delta.translate, 0, p);\n  output.scale = mixNumber(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\n\nfunction mixAxis(output, from, to, p) {\n  output.min = mixNumber(from.min, to.min, p);\n  output.max = mixNumber(from.max, to.max, p);\n}\n\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\n\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\n\nconst defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nconst userAgentContains = string => typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\n\n\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\") ? Math.round : noop;\n\nfunction roundAxis(axis) {\n  // Round to the nearest .5 pixels to support subpixel layouts\n  axis.min = roundPoint(axis.min);\n  axis.max = roundPoint(axis.max);\n}\n\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\n\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };","map":{"version":3,"names":["SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","isNear","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEqualsRounded","isDeltaZero","aspectRatio","boxEquals","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","FlatTree","resolveMotionValue","globalProjectionState","delay","mixNumber","record","isSVGElement","animateSingleValue","clamp","cancelFrame","frameData","steps","frame","noop","time","microtask","transformAxes","hiddenVisibility","visibility","animationTarget","id","projectionFrameData","type","totalNodes","resolvedTargetDeltas","recalculatedProjection","resetDistortingTransform","key","visualElement","values","sharedAnimationValues","latestValues","setStaticValue","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","constructor","parent","animationId","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","hasTreeAnimated","updateScheduled","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","i","length","addEventListener","name","handler","has","set","get","add","notifyListeners","subscriptionManager","args","notify","hasListeners","mount","instance","layoutId","layout","current","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","animate","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","startAnimation","isLead","onExitComplete","unmount","willUpdate","remove","stack","getStack","delete","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetSkewAndRotation","getTransformTemplate","transformTemplate","shouldNotifyListeners","node","updateScroll","prevTransformTemplateValue","updateSnapshot","update","updateWasBlocked","clearMeasurements","clearIsLayoutDirty","window","HandoffCancelAllAnimations","resetTransformStyle","updateLayout","notifyLayoutUpdate","now","timestamp","isProcessing","process","preRender","render","didUpdate","read","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","source","box","measureViewportBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","_a","lead","getLead","isShared","canSkip","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","pendingAnimation","prevTreeScaleX","prevTreeScaleY","projectionTransform","projectionDeltaWithTransform","prevProjectionTransform","hide","show","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","config","initialPromotionConfig","promote","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasDistortingTransform","z","rotate","rotateX","rotateY","rotateZ","skewX","skewY","resetValues","getProjectionStyles","styleProp","_b","styles","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","resetTree","clear","measuredLayout","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","Math","round","roundAxis"],"sources":["/Users/pepe/Documents/signin/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            if (window.HandoffCancelAllAnimations) {\n                window.HandoffCancelAllAnimations();\n            }\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}